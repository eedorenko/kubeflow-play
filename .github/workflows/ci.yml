name: CI
# The whole thing should be decomposed into pr/ci/cd and chatops
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  ACR_REGISTRY: 'kubeflowplayacr'
  ACR_REPOSITORY: 'mexicanfood'

jobs:
  ci:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - uses: actions/checkout@v2

    - uses: TrueBrain/actions-flake8@master
      if: 'false'
      with:
        path: code    

    # - name: Build Preprocess Image
    #   uses: ams0/acr-task-github-action@v1
    #   with:
    #     # Service Principal with Contributor role on the ACR
    #     service_principal: ${{ secrets.SERVICE_PRINCIPAL }}
    #     # Service Principal password
    #     service_principal_password: ${{ secrets.SERVICE_PRINCIPAL_PWD }}
    #     # Azure Container Registry tenant
    #     tenant: ${{ secrets.TENANT }}
    #     # The name of the ACR, minus the .azurecr.io
    #     registry: ${{ env.ACR_REGISTRY }}
    #     # Repository to use
    #     repository: ${{ env.ACR_REPOSITORY }}
    #     branch: kubeflow
    #     tag: latest
    #     # Docker image name
    #     image: preprocess
    #     # The folder in the Github repo that holds the source
    #     folder: code/preprocess
    
    # - name: Build Profile Image
    #   uses: ams0/acr-task-github-action@v1
    #   with:
    #     # Service Principal with Contributor role on the ACR
    #     service_principal: ${{ secrets.SERVICE_PRINCIPAL }}
    #     # Service Principal password
    #     service_principal_password: ${{ secrets.SERVICE_PRINCIPAL_PWD }}
    #     # Azure Container Registry tenant
    #     tenant: ${{ secrets.TENANT }}
    #     # The name of the ACR, minus the .azurecr.io
    #     registry: ${{ env.ACR_REGISTRY }}
    #     # Repository to use
    #     repository: ${{ env.ACR_REPOSITORY }}
    #     branch: kubeflow
    #     tag: latest
    #     # Docker image name
    #     image: profile
    #     # The folder in the Github repo that holds the source
    #     folder: code/profile

    # - name: Build Deploy Image
    #   uses: ams0/acr-task-github-action@v1
    #   with:
    #     # Service Principal with Contributor role on the ACR
    #     service_principal: ${{ secrets.SERVICE_PRINCIPAL }}
    #     # Service Principal password
    #     service_principal_password: ${{ secrets.SERVICE_PRINCIPAL_PWD }}
    #     # Azure Container Registry tenant
    #     tenant: ${{ secrets.TENANT }}
    #     # The name of the ACR, minus the .azurecr.io
    #     registry: ${{ env.ACR_REGISTRY }}
    #     # Repository to use
    #     repository: ${{ env.ACR_REPOSITORY }}
    #     branch: kubeflow
    #     tag: latest
    #     # Docker image name
    #     image: deploy
    #     # The folder in the Github repo that holds the source
    #     folder: code/deploy

    # - name: Build Register Image
    #   uses: ams0/acr-task-github-action@v1
    #   with:
    #     # Service Principal with Contributor role on the ACR
    #     service_principal: ${{ secrets.SERVICE_PRINCIPAL }}
    #     # Service Principal password
    #     service_principal_password: ${{ secrets.SERVICE_PRINCIPAL_PWD }}
    #     # Azure Container Registry tenant
    #     tenant: ${{ secrets.TENANT }}
    #     # The name of the ACR, minus the .azurecr.io
    #     registry: ${{ env.ACR_REGISTRY }}
    #     # Repository to use
    #     repository: ${{ env.ACR_REPOSITORY }}
    #     branch: kubeflow
    #     tag: latest
    #     # Docker image name
    #     image: register
    #     # The folder in the Github repo that holds the source
    #     folder: code/register

    # - name: Build Training Image
    #   uses: ams0/acr-task-github-action@v1
    #   with:
    #     # Service Principal with Contributor role on the ACR
    #     service_principal: ${{ secrets.SERVICE_PRINCIPAL }}
    #     # Service Principal password
    #     service_principal_password: ${{ secrets.SERVICE_PRINCIPAL_PWD }}
    #     # Azure Container Registry tenant
    #     tenant: ${{ secrets.TENANT }}
    #     # The name of the ACR, minus the .azurecr.io
    #     registry: ${{ env.ACR_REGISTRY }}
    #     # Repository to use
    #     repository: ${{ env.ACR_REPOSITORY }}
    #     branch: kubeflow
    #     tag: latest
    #     # Docker image name
    #     image: training
    #     # The folder in the Github repo that holds the source
    #     folder: code/training

    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    
    - name: Install KFP SDK
      run: pip3 install kfp --upgrade

    - name: Build KF Pipeline
      run: python pipeline.py
      working-directory: code

    - name: Upload artifact
      uses: actions/upload-artifact@v1.0.0
      with:
        # Artifact name
        name: kfp-pipeline        
        path: 'pipeline.tar.gz'


        # Runs a single command using the runners shell
    # - name: Run lint tests
    #   run: flake8 --output-file=lint-testresults.xml --format junit-xml
    
    # - name: Setup Python
    #   uses: actions/setup-python@v1
    #   with:
    #     python-version: 3.7.4
    #     architecture: x64
    # - name: Install flake8
    #   run: pip install flake8
    # - name: Run flake8
    #   uses: suo/flake8-github-action@releases/v1
    #   with:
    #     checkName: 'model_ci'   # NOTE: this needs to be the same as the job name
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GIT_HUB_TOKEN }}

    # - name: Upload artifact
    #   uses: actions/upload-artifact@v1.0.0
    #   if: always()
    #   with:
    #     # Artifact name
    #     name: Linting-report
    #     # Directory containing files to upload
    #     path: lint-testresults.xml

    # - uses: ashley-taylor/junit-report-annotations-action@v1.0
    #   if: always()
    #   with:
    #     access-token: ${{ secrets.GITHUB_TOKEN }}
    #     path: lint-testresults.xml
    # Runs Linting
    # - name: Run a multi-line scriptsteps
    #   uses: grantmcconnaughey/lintly-flake8-github-action@v1.0
    #   with:
    #     # The GitHub API token to create reviews with
    #     token: ${{ secrets.GIT_HUB_TOKEN }}
    #     # Fail if "new" violations detected or "any", default "new"
    #     failIf: any
